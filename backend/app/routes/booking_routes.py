from flask import Blueprint, request, jsonify
from datetime import datetime
import json
import logging
from .models import Booking
import psycopg2

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

bp = Blueprint("bookings", __name__)

def handle_db_error(func):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    def wrapper(*args, **kwargs):
        try:
            return func(*args, **kwargs)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ API: {str(e)}")
            return jsonify({"error": "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞", "details": str(e)}), 500
    wrapper.__name__ = func.__name__
    return wrapper

@bp.route("/health", methods=["GET"])
@handle_db_error
def health_check():
    return jsonify({"status": "ok", "message": "–°–µ—Ä–≤–∏—Å —Ä–∞–±–æ—Ç–∞–µ—Ç"}), 200



@bp.route("/", methods=["GET"])
@handle_db_error
def get_bookings():
    bookings = Booking.get_all()
    return jsonify(bookings), 200

@bp.route("/<int:booking_id>", methods=["GET"])
@handle_db_error
def get_booking_by_id(booking_id):
    booking = Booking.get_by_id(booking_id)
    if booking:
        return jsonify(booking), 200
    return jsonify({"error": "–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"}), 404

@bp.route("/", methods=["POST"])
@handle_db_error
def create_booking():
    data = request.json or {}
    logger.info(f"üì• –ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {data}")

    if "equipment" in data and isinstance(data["equipment"], list):
        try:
            filtered_equipment = [{"name": item["name"], "quantity": item["quantity"]} for item in data["equipment"]]
            data["equipment"] = filtered_equipment  # –ü–µ—Ä–µ–¥–∞–µ–º —Å–ø–∏—Å–æ–∫, JSON —Å–æ–∑–¥–∞–µ—Ç—Å—è –≤ –º–æ–¥–µ–ª–∏
        except (KeyError, TypeError) as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ equipment: {str(e)}")
            return jsonify({"error": "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç equipment"}), 400

    # –î–æ–±–∞–≤–ª—è–µ–º "where" –≤ –¥–∞–Ω–Ω—ã–µ
    where = data.get("where", "–≤ —Å—Ç—É–¥–∏–∏")  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é "–≤ —Å—Ç—É–¥–∏–∏"
    
    try:
        new_booking_id = Booking.create(data, where)
        logger.info(f"üì• –°–æ–∑–¥–∞–Ω–Ω–æ–µ ID –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {new_booking_id}")
        
        if new_booking_id:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—É—é –∑–∞–ø–∏—Å—å –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ—ë
            created_booking = Booking.get_by_id(new_booking_id)
            logger.info(f"üì• –ü–æ–ª—É—á–µ–Ω–Ω–∞—è –∑–∞–ø–∏—Å—å: {created_booking}")
            return jsonify(created_booking), 201
        else:
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ - ID is None")
            return jsonify({"error": "Failed to create booking"}), 500
    except Exception as e:
        logger.error(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {str(e)}")
        return jsonify({"error": f"Database error: {str(e)}"}), 500

@bp.route("/<int:booking_id>", methods=["PUT"])
@handle_db_error
def update_booking(booking_id):
    data = request.get_json()
    logger.info(f"üì• –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è {booking_id}")
    logger.info(f"üì• –ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {data}")

    where = data.get("where", "–≤ —Å—Ç—É–¥–∏–∏")
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã–µ –ø–æ–ª—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    allowed_fields = ['start_date', 'end_date', 'renter', 'issuer', 'receiver', 'status', 'notes', 'equipment']
    filtered_data = {key: value for key, value in data.items() if key in allowed_fields}
    
    # –û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –≤ –º–æ–¥–µ–ª–∏, –∑–¥–µ—Å—å —Ç–æ–ª—å–∫–æ —Ñ–∏–ª—å—Ç—Ä—É–µ–º –ø–æ–ª—è
    if "equipment" in filtered_data and isinstance(filtered_data["equipment"], list):
        filtered_data["equipment"] = [
            {"name": item["name"], "quantity": item.get("quantity", 1)}
            for item in filtered_data["equipment"]
        ]
    
    logger.info(f"üì• –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {filtered_data}")

    try:
        if "start_date" in filtered_data:
            filtered_data["start_date"] = datetime.strptime(filtered_data["start_date"], "%Y-%m-%d").date()
        if "end_date" in filtered_data:
            filtered_data["end_date"] = datetime.strptime(filtered_data["end_date"], "%Y-%m-%d").date()
    except ValueError as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞—Ç—ã: {e}")
        return jsonify({"error": "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ YYYY-MM-DD"}), 400

    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∑–∞–ø–∏—Å—å
        existing_booking = Booking.get_by_id(booking_id)
        if not existing_booking:
            logger.error(f"‚ùå –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ {booking_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return jsonify({"error": "Booking not found"}), 404
            
        success = Booking.update(booking_id, filtered_data, where)
        if success:
            return jsonify({"message": "Booking updated successfully"}), 200
        else:
            logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ {booking_id} (updated 0 rows)")
            return jsonify({"error": "Failed to update booking"}), 500
    except Exception as e:
        logger.error(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è {booking_id}: {str(e)}")
        return jsonify({"error": f"Database error: {str(e)}"}), 500

@bp.route("/<int:booking_id>", methods=["DELETE"])
@handle_db_error
def delete_booking(booking_id):
    success = Booking.delete(booking_id)
    if success:
        return jsonify({"message": "–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ"}), 200
    return jsonify({"error": "–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"}), 404
