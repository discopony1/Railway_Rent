from flask import Blueprint, request, jsonify
from datetime import datetime
import json
import logging
from .models import Booking
import psycopg2

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

bp = Blueprint("bookings", __name__)

def handle_db_error(func):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    def wrapper(*args, **kwargs):
        try:
            return func(*args, **kwargs)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ API: {str(e)}")
            return jsonify({"error": "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞", "details": str(e)}), 500
    wrapper.__name__ = func.__name__
    return wrapper

@bp.route("/health", methods=["GET"])
@handle_db_error
def health_check():
    return jsonify({"status": "ok", "message": "–°–µ—Ä–≤–∏—Å —Ä–∞–±–æ—Ç–∞–µ—Ç"}), 200

@bp.route("/", methods=["GET"])
@handle_db_error
def get_bookings():
    bookings = Booking.get_all()
    return jsonify(bookings), 200

@bp.route("/<int:booking_id>", methods=["GET"])
@handle_db_error
def get_booking_by_id(booking_id):
    booking = Booking.get_by_id(booking_id)
    if booking:
        return jsonify(booking), 200
    return jsonify({"error": "–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"}), 404

@bp.route("/", methods=["POST"])
@handle_db_error
def create_booking():
    data = request.json
    logger.info(f"üì• –ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {data}")

    if "equipment" in data and isinstance(data["equipment"], list):
        try:
            filtered_equipment = [{"name": item["name"], "quantity": item["quantity"]} for item in data["equipment"]]
            data["equipment"] = json.dumps(filtered_equipment)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º JSON-—Ñ–æ—Ä–º–∞—Ç
        except (KeyError, TypeError) as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ equipment: {str(e)}")
            return jsonify({"error": "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç equipment"}), 400

    # –î–æ–±–∞–≤–ª—è–µ–º "where" –≤ –¥–∞–Ω–Ω—ã–µ
    where = data.get("where", "–≤ —Å—Ç—É–¥–∏–∏")  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é "–≤ —Å—Ç—É–¥–∏–∏"
    new_booking = Booking.create(data, where)
    return jsonify({"id": new_booking}), 201

@bp.route("/<int:booking_id>", methods=["PUT"])
@handle_db_error
def update_booking(booking_id):
    data = request.get_json()
    logger.info(f"üì• –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è {booking_id}")

    if "equipment" in data and isinstance(data["equipment"], list):
        data["equipment"] = json.dumps([
            {"name": item["name"], "quantity": item.get("quantity", 1)}
            for item in data["equipment"]
        ])

    where = data.get("where", "–≤ —Å—Ç—É–¥–∏–∏")

    try:
        if "start_date" in data:
            data["start_date"] = datetime.strptime(data["start_date"], "%Y-%m-%d").date()
        if "end_date" in data:
            data["end_date"] = datetime.strptime(data["end_date"], "%Y-%m-%d").date()
    except ValueError as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞—Ç—ã: {e}")
        return jsonify({"error": "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ YYYY-MM-DD"}), 400

    success = Booking.update(booking_id, data, where)
    if success:
        return jsonify({"message": "Booking updated successfully"}), 200
    else:
        return jsonify({"error": "Failed to update booking"}), 500

@bp.route("/<int:booking_id>", methods=["DELETE"])
@handle_db_error
def delete_booking(booking_id):
    success = Booking.delete(booking_id)
    if success:
        return jsonify({"message": "–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ"}), 200
    return jsonify({"error": "–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"}), 404
