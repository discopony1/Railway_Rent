from flask import Blueprint, request, jsonify
from datetime import datetime
from datetime import datetime, timedelta
import json
import logging
from .models import Booking
import psycopg2
DATABASE_URL = "postgresql://neondb_owner:npg_pFV8bEtTrRM5@ep-weathered-poetry-a9z80hcr-pooler.gwc.azure.neon.tech/neondb?sslmode=require"

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

bp = Blueprint("bookings", __name__)

def get_db_connection():
    """–°–æ–∑–¥–∞–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."""
    return psycopg2.connect(DATABASE_URL)

def handle_db_error(func):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    def wrapper(*args, **kwargs):
        try:
            return func(*args, **kwargs)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ API: {str(e)}")
            return jsonify({"error": "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞", "details": str(e)}), 500
    wrapper.__name__ = func.__name__
    return wrapper

# üîπ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ API
@bp.route("/health", methods=["GET"])
@handle_db_error
def health_check():
    return jsonify({"status": "ok", "message": "–°–µ—Ä–≤–∏—Å —Ä–∞–±–æ—Ç–∞–µ—Ç"}), 200

# üîπ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –∞—Ä–µ–Ω–¥
@bp.route("/", methods=["GET"])
@handle_db_error
def get_bookings():
    bookings = Booking.get_all()
    return jsonify(bookings), 200

# üîπ –ü–æ–ª—É—á–µ–Ω–∏–µ –∞—Ä–µ–Ω–¥—ã –ø–æ ID
@bp.route("/<int:booking_id>", methods=["GET"])
@handle_db_error
def get_booking_by_id(booking_id):
    booking = Booking.get_by_id(booking_id)
    if booking:
        return jsonify(booking), 200
    return jsonify({"error": "–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"}), 404

# üîπ –°–æ–∑–¥–∞–Ω–∏–µ –∞—Ä–µ–Ω–¥—ã
@bp.route("/", methods=["POST"])
@handle_db_error
def create_booking():
    data = request.json
    logger.info(f"üì• –ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {data}")

    if "equipment" in data and isinstance(data["equipment"], list):
        try:
            filtered_equipment = [{"name": item["name"], "quantity": item["quantity"]} for item in data["equipment"]]
            data["equipment"] = json.dumps(filtered_equipment)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º JSON-—Ñ–æ—Ä–º–∞—Ç
        except (KeyError, TypeError) as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ equipment: {str(e)}")
            return jsonify({"error": "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç equipment"}), 400

    new_booking = Booking.create(data)
    return jsonify({"id": new_booking}), 201

# üîπ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞—Ä–µ–Ω–¥—ã
@bp.route("/<int:booking_id>", methods=["PUT"])
@handle_db_error
def update_booking(booking_id):
    data = request.get_json()
    logger.info(f"üì• –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è {booking_id}")

    # –û—Å—Ç–∞–≤–ª—è–µ–º –≤ equipment —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    if "equipment" in data and isinstance(data["equipment"], list):
        data["equipment"] = json.dumps([
            {"name": item["name"], "quantity": item.get("quantity", 1)}
            for item in data["equipment"]
        ])  # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ JSON –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã
    try:
        if "start_date" in data:
            data["start_date"] = datetime.strptime(data["start_date"], "%Y-%m-%d").date()
        if "end_date" in data:
            data["end_date"] = datetime.strptime(data["end_date"], "%Y-%m-%d").date()
    except ValueError as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞—Ç—ã: {e}")
        return jsonify({"error": "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ YYYY-MM-DD"}), 400

    success = Booking.update(booking_id, data)
    if success:
        return jsonify({"message": "Booking updated successfully"}), 200
    else:
        return jsonify({"error": "Failed to update booking"}), 500

# üîπ –£–¥–∞–ª–µ–Ω–∏–µ –∞—Ä–µ–Ω–¥—ã
@bp.route("/<int:booking_id>", methods=["DELETE"])
@handle_db_error
def delete_booking(booking_id):
    success = Booking.delete(booking_id)
    if success:
        return jsonify({"message": "–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ"}), 200
    return jsonify({"error": "–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"}), 404

# üîπ –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è —Å —É—á–µ—Ç–æ–º –±—Ä–æ–Ω–µ–π
@bp.route("/available-equipment", methods=["GET"])
@handle_db_error
def get_available_equipment():
    start_date = request.args.get("start_date")
    end_date = request.args.get("end_date")

    if not start_date or not end_date:
        return jsonify({"error": "–¢—Ä–µ–±—É—é—Ç—Å—è start_date –∏ end_date"}), 400

    conn = get_db_connection()
    cursor = conn.cursor()

    try:
        # ‚úÖ –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è
        cursor.execute("SELECT id, name, category, total AS total_quantity FROM inventory")
        inventory_rows = cursor.fetchall()
        inventory = [{"id": row[0], "name": row[1], "category": row[2], "total_quantity": row[3]} for row in inventory_rows]

        # ‚úÖ –ü–æ–ª—É—á–∞–µ–º –∞—Ä–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã–µ –µ–¥–∏–Ω–∏—Ü—ã –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥
        cursor.execute("""
            SELECT equipment->>'name' AS name, SUM((equipment->>'quantity')::int) AS rented
            FROM bookings
            WHERE (start_date <= %s AND end_date >= %s)
            GROUP BY equipment->>'name'
        """, (end_date, start_date))
        rented_rows = cursor.fetchall()

        # ‚úÖ –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–ª–æ–≤–∞—Ä—å { name: rented_quantity }
        rented_dict = {row[0]: row[1] for row in rented_rows}

        # ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        for item in inventory:
            rented = rented_dict.get(item["name"], 0)
            item["availableQuantity"] = max(0, item["total_quantity"] - rented)

        return jsonify(inventory), 200

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ get_available_equipment: {str(e)}")
        return jsonify({"error": "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è"}), 500

    finally:
        cursor.close()
        conn.close()

@bp.route("/suggest-availability", methods=["POST"])
def suggest_availability():
    db = get_db_connection()
    data = request.json
    selected_equipment = data.get("equipment", [])  # [{"name": "–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞", "quantity": 2}, ...]
    start_date = datetime.fromisoformat(data.get("start_date"))
    end_date = datetime.fromisoformat(data.get("end_date"))

    conflicts = {}  # –ó–¥–µ—Å—å –±—É–¥—É—Ç –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã –ø–æ –∫–∞–∂–¥–æ–º—É –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—é

    for item in selected_equipment:
        name = item["name"]

        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∞—Ä–µ–Ω–¥—ã –¥–ª—è —ç—Ç–æ–≥–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è –≤ —É–∫–∞–∑–∞–Ω–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω
        query = """
        SELECT start_date, end_date, quantity
        FROM rent
        WHERE status != '–í–æ–∑–≤—Ä–∞—â–µ–Ω–æ' 
        AND equipment @> '[{"name": "%s"}]'::jsonb
        """ % name
        rentals = db.execute(query).fetchall()

        unavailable_periods = []
        for rental in rentals:
            rental_start = rental["start_date"]
            rental_end = rental["end_date"]

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–µ—Ä–µ—Å–µ–∫–∞–µ—Ç—Å—è –ª–∏ –∞—Ä–µ–Ω–¥–∞
            if rental_start < end_date and rental_end > start_date:
                unavailable_periods.append((rental_start, rental_end))

        # –ï—Å–ª–∏ –µ—Å—Ç—å –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è, –Ω–∞—Ö–æ–¥–∏–º –±–ª–∏–∂–∞–π—à–∏–π —Å–≤–æ–±–æ–¥–Ω—ã–π —Å–ª–æ—Ç
        if unavailable_periods:
            unavailable_periods.sort()  # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∞—Ä–µ–Ω–¥—ã –ø–æ –¥–∞—Ç–µ
            next_available_start = unavailable_periods[-1][1] + timedelta(minutes=1)
            conflicts[name] = next_available_start

    return jsonify({"conflicts": conflicts}), 200