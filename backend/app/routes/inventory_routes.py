from flask import Blueprint, jsonify, request
import logging
from .models import Inventory  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–¥–µ–ª—å Inventory

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

bp = Blueprint("inventory", __name__, url_prefix="/api/inventory")  # –£–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å –¥–ª—è –≤—Å–µ—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤ —ç—Ç–æ–≥–æ Blueprint

def handle_db_error(func):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    def wrapper(*args, **kwargs):
        try:
            return func(*args, **kwargs)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ API: {str(e)}")
            return jsonify({"error": "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞", "details": str(e)}), 500
    wrapper.__name__ = func.__name__
    return wrapper

# üîπ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è —Å —É—á—ë—Ç–æ–º –±—Ä–æ–Ω–∏
@bp.route("/", methods=["GET"])
@handle_db_error
def get_inventory():
    try:
        inventory_list = Inventory.get_all()
        return jsonify(inventory_list), 200
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è: {str(e)}")
        return jsonify({"error": "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å"}), 500

# üîπ –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è –ø–æ ID
@bp.route("/<int:item_id>", methods=["GET"])
@handle_db_error
def get_inventory_item(item_id):
    item = Inventory.get_by_id(item_id)
    if item:
        return jsonify(item), 200
    return jsonify({"error": "–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"}), 404

# üîπ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è –ø–æ ID
@bp.route("/<int:item_id>", methods=["PUT"])
@handle_db_error
def update_inventory_item(item_id):
    data = request.json
    logger.info(f"Received data for update: {data}")  # –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ

    updated = Inventory.update_item(
        item_id, 
        name=data.get('name'),
        category=data.get('category'),
        subcategory=data.get('subcategory'),
        model=data.get('model'),
        serial_number=data.get('serial_number'),
        notes=data.get('notes'),
        status=data.get('status'),
        total=data.get('total'),
        belongs_to=data.get('belongs_to')
    )
    
    if updated:
        logger.info(f"Item {item_id} updated successfully")  # –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        return jsonify({"success": True}), 200
    else:
        logger.error(f"Failed to update item {item_id}")  # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
        return jsonify({"error": "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ"}), 500
    
# üîπ –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è
@bp.route("/create", methods=["POST"])
@handle_db_error
def create_inventory_item():
    data = request.json
    name = data.get('name')
    category = data.get('category')
    subcategory = data.get('subcategory')
    model = data.get('model')      
    serial_number = data.get('serial_number')
    notes = data.get('notes')
    status = data.get('status')
    total = data.get('total')
    belongs_to = data.get('belongs_to')


    if not all([name, category, subcategory, model, serial_number, status, notes, total, belongs_to]):
        return jsonify({"error": "–í—Å–µ –ø–æ–ª—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω—ã"}), 400

    new_item_id = Inventory.create_item(name, category, subcategory, model, serial_number, status, notes, total, belongs_to)
    if new_item_id:
        return jsonify({"success": True, "id": new_item_id}), 201
    else:
        return jsonify({"error": "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ"}), 500