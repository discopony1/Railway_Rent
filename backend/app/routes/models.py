import psycopg2
import json
import logging

DATABASE_URL = "postgresql://neondb_owner:npg_pFV8bEtTrRM5@ep-weathered-poetry-a9z80hcr-pooler.gwc.azure.neon.tech/neondb?sslmode=require"

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def get_db_connection():
    """–°–æ–∑–¥–∞–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."""
    return psycopg2.connect(DATABASE_URL)

def execute_query(query, params=None, fetch=True):
    """–û–±—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è SQL-–∑–∞–ø—Ä–æ—Å–æ–≤."""
    conn = get_db_connection()
    cursor = conn.cursor()
    try:
        cursor.execute(query, params)
        if fetch:
            rows = cursor.fetchall()
            columns = [desc[0] for desc in cursor.description]
            conn.commit()  # –ö–æ–º–º–∏—Ç–∏–º –∏ –¥–ª—è fetch=True
            return [dict(zip(columns, row)) for row in rows]
        conn.commit()
        rowcount = cursor.rowcount
        logger.info(f"üîç SQL rowcount: {rowcount}")
        return rowcount
    except Exception as e:
        conn.rollback()
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è SQL –∑–∞–ø—Ä–æ—Å–∞: {str(e)}")
        logger.error(f"‚ùå SQL: {query}")
        logger.error(f"‚ùå Params: {params}")
        raise
    finally:
        cursor.close()
        conn.close()

class Booking:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∞—Ä–µ–Ω–¥–∞–º–∏."""

    @staticmethod
    def create(data, where):
        """–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é –∞—Ä–µ–Ω–¥—É –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –µ–µ ID."""
        query = """
            INSERT INTO bookings (start_date, end_date, renter, issuer, receiver, status, notes, equipment, "where")
            VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s)
            RETURNING id
        """
        equipment_data = data.get("equipment", [])
        if isinstance(equipment_data, str):
            equipment = equipment_data  # –£–∂–µ JSON —Å—Ç—Ä–æ–∫–∞
        else:
            equipment = json.dumps(equipment_data)  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ JSON
        params = (
            data.get("start_date"),
            data.get("end_date"),
            data.get("renter", ""),
            data.get("issuer", ""),
            data.get("receiver", ""),
            data.get("status", "–ë—Ä–æ–Ω—å"),
            data.get("notes", ""),
            equipment,
            where
        )
        logger.info(f"üîç CREATE SQL params: {params}")
        result = execute_query(query, params, fetch=True)
        logger.info(f"üîç CREATE result: {result}")
        return result[0]["id"] if result else None

    @staticmethod
    def update(booking_id, data, where):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –∞—Ä–µ–Ω–¥—É –ø–æ ID."""
        query = """
            UPDATE bookings
            SET start_date = %s, 
                end_date = %s, 
                renter = %s, 
                issuer = %s, 
                receiver = %s, 
                status = %s, 
                notes = %s, 
                equipment = %s,
                "where" = %s
            WHERE id = %s
        """
        equipment_data = data.get("equipment", [])
        if isinstance(equipment_data, str):
            equipment = equipment_data  # –£–∂–µ JSON —Å—Ç—Ä–æ–∫–∞
        else:
            equipment = json.dumps(equipment_data)  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ JSON
        params = (
            data.get("start_date"),
            data.get("end_date"),
            data.get("renter", ""),
            data.get("issuer", ""),
            data.get("receiver", ""),
            data.get("status", "–ë—Ä–æ–Ω—å"),
            data.get("notes", ""),
            equipment,
            where,
            booking_id
        )
        logger.info(f"üîç SQL params: {params}")
        result = execute_query(query, params, fetch=False)
        logger.info(f"üîç Updated rows count: {result}")
        return result > 0  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º True –µ—Å–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–∞ —Å—Ç—Ä–æ–∫–∞

    @staticmethod
    def get_all():
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∞—Ä–µ–Ω–¥."""
        query = "SELECT * FROM bookings"
        return execute_query(query, fetch=True)

    @staticmethod
    def get_by_id(booking_id):
        """–ü–æ–ª—É—á–∞–µ—Ç –∞—Ä–µ–Ω–¥—É –ø–æ ID –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å."""
        query = "SELECT * FROM bookings WHERE id = %s"
        params = (booking_id,)
        result = execute_query(query, params, fetch=True)
        return result[0] if result else None

    @staticmethod
    def delete(booking_id):
        """–£–¥–∞–ª—è–µ—Ç –∞—Ä–µ–Ω–¥—É –ø–æ ID."""
        query = "DELETE FROM bookings WHERE id = %s"
        params = (booking_id,)
        return execute_query(query, params, fetch=False)

class Inventory:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ–º."""

    @staticmethod
    def get_all():
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ–≥–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è –±–µ–∑ —É—á–µ—Ç–∞ –±—Ä–æ–Ω–∏."""
        query = """
            SELECT id, name, category, subcategory, model, serial_number, notes, status, total, belongs_to
            FROM inventory
        """
        return execute_query(query, fetch=True)

    @staticmethod
    def get_by_id(equipment_id):
        """–ü–æ–ª—É—á–∞–µ—Ç –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ –ø–æ ID –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å."""
        query = """
            SELECT id, name, category, subcategory, model, serial_number, notes, status, total, belongs_to
            FROM inventory WHERE id = %s
        """
        params = (equipment_id,)
        result = execute_query(query, params, fetch=True)
        return result[0] if result else None

    @staticmethod
    def update_rented(equipment_id, rented_count):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞—Ä–µ–Ω–¥–æ–≤–∞–Ω–Ω–æ–≥–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è."""
        query = "UPDATE inventory SET rented = %s WHERE id = %s"
        params = (rented_count, equipment_id)
        return execute_query(query, params, fetch=False)
    
    @staticmethod
    def create_item(name, category, subcategory, model, serial_number, notes, status, total, belongs_to):
        """–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ."""
        query = """
            INSERT INTO inventory (name, category, subcategory, model, serial_number, notes, status, total, belongs_to)
            VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s)
            RETURNING id
        """
        params = (name, category, subcategory, model, serial_number, notes, status, total, belongs_to)
        result = execute_query(query, params, fetch=True)
        return result[0]["id"] if result else None

    @staticmethod
    def update_item(equipment_id, name, category, subcategory, model, serial_number, notes, status, total, belongs_to):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ –ø–æ ID."""
        query = """
            UPDATE inventory
            SET name = %s, 
                category = %s, 
                subcategory = %s, 
                model = %s,
                serial_number = %s,
                notes = %s, 
                status = %s, 
                total = %s,
                belongs_to = %s
            WHERE id = %s
        """
        params = (name, category, subcategory, model, serial_number, notes, status, total, belongs_to, equipment_id)
        return execute_query(query, params, fetch=False)

    @staticmethod
    def delete_item(equipment_id):
        """–£–¥–∞–ª—è–µ—Ç –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ –ø–æ ID."""
        query = "DELETE FROM inventory WHERE id = %s"
        params = (equipment_id,)
        return execute_query(query, params, fetch=False)

    @staticmethod
    def get_available_equipment(start_date, end_date, exclude_booking_id=None, current_equipment=None):
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞.
        
        Args:
            start_date: –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –∞—Ä–µ–Ω–¥—ã
            end_date: –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –∞—Ä–µ–Ω–¥—ã
            exclude_booking_id: ID –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è, –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ –∏—Å–∫–ª—é—á–∏—Ç—å –∏–∑ —Ä–∞—Å—á–µ—Ç–∞ (–¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
        """
        # –ü–æ–ª—É—á–∞–µ–º –≤–µ—Å—å –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å
        inventory_query = """
            SELECT id, name, category, subcategory, model, serial_number, notes, status, total, belongs_to
            FROM inventory
        """
        inventory = execute_query(inventory_query, fetch=True)
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º –ø–µ—Ä–∏–æ–¥–µ
        bookings_query = """
            SELECT equipment, start_date, end_date, status
            FROM bookings 
            WHERE start_date IS NOT NULL 
            AND end_date IS NOT NULL
            AND status IN ('–ë—Ä–æ–Ω—å', '–í—ã–¥–∞–Ω–æ')
            AND start_date < %s AND end_date > %s
        """
        params = [end_date, start_date]
        
        if exclude_booking_id:
            bookings_query += " AND id != %s"
            params.append(exclude_booking_id)
            
        bookings = execute_query(bookings_query, params, fetch=True)
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∑–∞–Ω—è—Ç–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ –ø–æ –∏–º–µ–Ω–∞–º
        occupied_equipment = {}
        
        for booking in bookings:
            try:
                equipment_data = booking['equipment']
                if isinstance(equipment_data, str):
                    equipment_list = json.loads(equipment_data) if equipment_data else []
                elif isinstance(equipment_data, list):
                    equipment_list = equipment_data  # –£–∂–µ —Å–ø–∏—Å–æ–∫
                else:
                    equipment_list = []
                    
                for item in equipment_list:
                    equipment_name = item.get('name', '')
                    quantity = item.get('quantity', 0)
                    
                    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º null/None –∑–Ω–∞—á–µ–Ω–∏—è
                    if quantity is None:
                        quantity = 1  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 1 —à—Ç—É–∫–∞
                    else:
                        quantity = int(quantity)
                    
                    if equipment_name and quantity > 0:
                        if equipment_name not in occupied_equipment:
                            occupied_equipment[equipment_name] = 0
                        occupied_equipment[equipment_name] += quantity
            except (json.JSONDecodeError, TypeError) as e:
                logger.warning(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ equipment –≤ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
                continue
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è, –∫–æ—Ç–æ—Ä–æ–µ —É–∂–µ –≤—ã–±—Ä–∞–Ω–æ –≤ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º–æ–π –∑–∞–ø–∏—Å–∏
        current_equipment_count = {}
        if current_equipment:
            try:
                current_list = json.loads(current_equipment) if isinstance(current_equipment, str) else current_equipment
                for item in current_list:
                    equipment_name = item.get('name', '')
                    quantity = item.get('quantity', 0)
                    if quantity is None:
                        quantity = 1
                    else:
                        quantity = int(quantity)
                    
                    if equipment_name and quantity > 0:
                        current_equipment_count[equipment_name] = quantity
            except (json.JSONDecodeError, TypeError) as e:
                logger.warning(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ current_equipment: {e}")

        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –∫ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—é
        for item in inventory:
            item_name = item['name']
            total_quantity = item['total'] or 0
            occupied_quantity = occupied_equipment.get(item_name, 0)
            current_usage = current_equipment_count.get(item_name, 0)
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å: –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–Ω—É—Å –∑–∞–Ω—è—Ç–æ–µ –¥—Ä—É–≥–∏–º–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è–º–∏
            # (occupied_quantity —É–∂–µ –≤–∫–ª—é—á–∞–µ—Ç current_usage, –ø–æ—ç—Ç–æ–º—É –≤—ã—á–∏—Ç–∞–µ–º –µ–≥–æ —á—Ç–æ–±—ã –Ω–µ —É—á–∏—Ç—ã–≤–∞—Ç—å –¥–≤–∞–∂–¥—ã)
            truly_occupied = occupied_quantity - current_usage
            available_quantity = max(0, total_quantity - truly_occupied)
            
            item['available'] = available_quantity
            item['occupied'] = truly_occupied
            item['current_usage'] = current_usage
            
        return inventory
    
    @staticmethod
    def reindex_items(items):
        """–ü–µ—Ä–µ–Ω–∞–∑–Ω–∞—á–∞–µ—Ç ID –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π —Å–æ–≥–ª–∞—Å–Ω–æ –Ω–æ–≤–æ–º—É –ø–æ—Ä—è–¥–∫—É."""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
            ordered_data = []
            for item in items:
                query = """
                    SELECT name, category, subcategory, model, serial_number, notes, status, total, belongs_to
                    FROM inventory WHERE id = %s
                """
                result = execute_query(query, (item['old_id'],), fetch=True)
                if result:
                    ordered_data.append(result[0])
            
            # –£–¥–∞–ª—è–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã
            execute_query("DELETE FROM inventory", fetch=False)
            
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å
            execute_query("ALTER SEQUENCE inventory_id_seq RESTART WITH 1", fetch=False)
            
            # –í—Å—Ç–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –Ω–æ–≤–æ–º –ø–æ—Ä—è–¥–∫–µ
            for data in ordered_data:
                query = """
                    INSERT INTO inventory (name, category, subcategory, model, serial_number, notes, status, total, belongs_to)
                    VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s)
                """
                params = (
                    data['name'], 
                    data['category'], 
                    data['subcategory'], 
                    data['model'], 
                    data['serial_number'], 
                    data['notes'], 
                    data['status'], 
                    data['total'], 
                    data['belongs_to']
                )
                execute_query(query, params, fetch=False)
            
            logger.info(f"Successfully reindexed {len(items)} inventory items")
            return True
            
        except Exception as e:
            logger.error(f"Error during reindexing: {str(e)}")
            raise
