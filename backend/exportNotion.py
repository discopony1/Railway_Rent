import requests
import psycopg2
import json
from datetime import datetime

# –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à URL –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Neon
NEON_DATABASE_URL = "postgresql://neondb_owner:npg_pFV8bEtTrRM5@ep-weathered-poetry-a9z80hcr-pooler.gwc.azure.neon.tech/neondb?sslmode=require"

NOTION_TOKEN = "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"
DATABASE_ID = "aa4025819d9d443584376acbd0408144"

HEADERS = {
    "Authorization": f"Bearer {NOTION_TOKEN}",
    "Content-Type": "application/json",
    "Notion-Version": "2022-06-28"
}

def connect_db():
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Neon"""
    try:
        conn = psycopg2.connect(NEON_DATABASE_URL)
        print("‚úÖ –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Neon")
        return conn
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Neon: {e}")
        return None

def create_table_structure():
    """–°–æ–∑–¥–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—É inventory –≤ Neon"""
    conn = connect_db()
    if not conn:
        return

    cursor = conn.cursor()

    # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É —Å –Ω—É–ª—è
    create_table_query = """
    CREATE TABLE IF NOT EXISTS inventory (
        id SERIAL PRIMARY KEY,
        name TEXT UNIQUE NOT NULL,
        category TEXT DEFAULT '',
        subcategory TEXT DEFAULT '',
        model TEXT DEFAULT '',
        serial_number TEXT DEFAULT '',
        notes TEXT DEFAULT '',
        status TEXT DEFAULT '',
        total INTEGER DEFAULT 0,
        rented INTEGER DEFAULT 0,
        last_updated TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    );
    """

    try:
        cursor.execute(create_table_query)
        conn.commit()
        print("‚úÖ –¢–∞–±–ª–∏—Ü–∞ inventory —Å–æ–∑–¥–∞–Ω–∞ –≤ Neon")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã: {e}")
    finally:
        cursor.close()
        conn.close()

def fetch_notion_data():
    """–ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã Notion"""
    url = f"https://api.notion.com/v1/databases/{DATABASE_ID}/query"
    results = []
    payload = {}

    while True:
        response = requests.post(url, headers=HEADERS, json=payload)
        if response.status_code != 200:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ Notion: {response.json()}")
            return []
        
        data = response.json()
        results.extend(data.get("results", []))
        
        if not data.get("has_more"):
            break
        payload["start_cursor"] = data["next_cursor"]

    print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(results)} –∑–∞–ø–∏—Å–µ–π –∏–∑ Notion")
    return results

def insert_data_into_neon(data):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ Neon"""
    conn = connect_db()
    if not conn:
        return

    cursor = conn.cursor()

    for entry in data:
        props = entry.get("properties", {})

        def get_text_value(prop, key):
            return prop.get(key, {}).get("rich_text", [{}])[0].get("text", {}).get("content", "") if prop.get(key, {}).get("rich_text") else ""

        name = props.get("–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ", {}).get("title", [{}])[0].get("text", {}).get("content", "").strip() or ""
        category = props.get("–ö–∞—Ç–µ–≥–æ—Ä–∏—è", {}).get("select", {}).get("name", "") or ""
        subcategory = props.get("–ü–æ–¥ –∫–∞—Ç–µ–≥–æ—Ä–∏—è", {}).get("select", {}).get("name", "") or ""
        model = get_text_value(props, "–ú–æ–¥–µ–ª—å")
        serial_number = get_text_value(props, "–°–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä")
        notes = get_text_value(props, "–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ")
        status = props.get("–°–æ—Å—Ç–æ—è–Ω–∏–µ", {}).get("status", {}).get("name", "") or ""
        total = props.get("–í—Å–µ–≥–æ", {}).get("number", 0) or 0

        try:
            cursor.execute(
                """
                INSERT INTO inventory (name, category, subcategory, model, serial_number, notes, status, total, last_updated)
                VALUES (%s, %s, %s, %s, %s, %s, %s, %s, NOW())
                ON CONFLICT (name) DO UPDATE 
                SET category = EXCLUDED.category,
                    subcategory = EXCLUDED.subcategory,
                    model = EXCLUDED.model,
                    serial_number = EXCLUDED.serial_number,
                    notes = EXCLUDED.notes,
                    status = EXCLUDED.status,
                    total = EXCLUDED.total,
                    last_updated = NOW()
                """,
                (name, category, subcategory, model, serial_number, notes, status, total)
            )
            conn.commit()
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏ {name}: {e}")
            conn.rollback()

    cursor.close()
    conn.close()
    print("‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –≤ Neon")

def main():
    print("üöÄ –ù–∞—á–∞–ª–æ –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –≤ Neon...")
    create_table_structure()  # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
    notion_data = fetch_notion_data()
    if notion_data:
        insert_data_into_neon(notion_data)
    print("‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")

if __name__ == "__main__":
    main()