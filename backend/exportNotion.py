import requests
import psycopg2
import json
from config import DATABASE_URL as DB_URL

NOTION_TOKEN = "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"
DATABASE_ID = "aa4025819d9d443584376acbd0408144"


HEADERS = {
    "Authorization": f"Bearer {NOTION_TOKEN}",
    "Content-Type": "application/json",
    "Notion-Version": "2022-06-28"
}

# üîπ 1. –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Notion
def fetch_notion_data():
    """–ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã Notion"""
    url = f"https://api.notion.com/v1/databases/{DATABASE_ID}/query"
    results = []
    payload = {}

    while True:
        response = requests.post(url, headers=HEADERS, json=payload)
        if response.status_code != 200:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {response.json()}")
            return []
        
        data = response.json()
        results.extend(data.get("results", []))
        
        if not data.get("has_more"):
            break
        payload["start_cursor"] = data["next_cursor"]

    print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(results)} –∑–∞–ø–∏—Å–µ–π –∏–∑ Notion")
    return results

# üîπ 2. –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL
def connect_db():
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å PostgreSQL"""
    try:
        conn = psycopg2.connect(DB_URL)
        print("‚úÖ –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
        return conn
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
        return None

# üîπ 3. –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–∞–±–ª–∏—Ü—ã
def update_table_structure():
    """–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ —Å—Ç–æ–ª–±—Ü—ã –≤ —Ç–∞–±–ª–∏—Ü—É inventory"""
    conn = connect_db()
    if not conn:
        return

    cursor = conn.cursor()

    alter_queries = [
        "ALTER TABLE inventory ADD COLUMN IF NOT EXISTS category TEXT DEFAULT ''",
        "ALTER TABLE inventory ADD COLUMN IF NOT EXISTS subcategory TEXT DEFAULT ''",
        "ALTER TABLE inventory ADD COLUMN IF NOT EXISTS model TEXT DEFAULT ''",
        "ALTER TABLE inventory ADD COLUMN IF NOT EXISTS serial_number TEXT DEFAULT ''",
        "ALTER TABLE inventory ADD COLUMN IF NOT EXISTS notes TEXT DEFAULT ''",
        "ALTER TABLE inventory ADD COLUMN IF NOT EXISTS status TEXT DEFAULT ''",
        "ALTER TABLE inventory ADD COLUMN IF NOT EXISTS total INTEGER DEFAULT 0",
        "ALTER TABLE inventory ADD COLUMN IF NOT EXISTS last_updated TIMESTAMP DEFAULT CURRENT_TIMESTAMP"
    ]

    for query in alter_queries:
        cursor.execute(query)

    conn.commit()
    cursor.close()
    conn.close()
    print("‚úÖ –¢–∞–±–ª–∏—Ü–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞, –≤—Å–µ —Å—Ç–æ–ª–±—Ü—ã –Ω–∞ –º–µ—Å—Ç–µ!")

# üîπ 4. –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –≤ PostgreSQL
def insert_data_into_postgres(data):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ PostgreSQL, –Ω–µ –∑–∞—Ç—Ä–∞–≥–∏–≤–∞—è –∞—Ä–µ–Ω–¥—É"""
    conn = connect_db()
    if not conn:
        return

    cursor = conn.cursor()

    for entry in data:
        props = entry.get("properties", {})

        def get_text_value(prop, key):
            """–ë–µ–∑–æ–ø–∞—Å–Ω–æ –ø–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ rich_text –∏–ª–∏ –æ—Å—Ç–∞–≤–ª—è–µ—Ç –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É"""
            return prop.get(key, {}).get("rich_text", [{}])[0].get("text", {}).get("content", "") if prop.get(key, {}).get("rich_text") else ""

        name = props.get("–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ", {}).get("title", [{}])[0].get("text", {}).get("content", "").strip() or ""
        category = props.get("–ö–∞—Ç–µ–≥–æ—Ä–∏—è", {}).get("select", {}).get("name", "") or ""
        subcategory = props.get("–ü–æ–¥ –∫–∞—Ç–µ–≥–æ—Ä–∏—è", {}).get("select", {}).get("name", "") or ""
        model = get_text_value(props, "–ú–æ–¥–µ–ª—å")
        serial_number = get_text_value(props, "–°–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä")
        notes = get_text_value(props, "–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ")
        status = props.get("–°–æ—Å—Ç–æ—è–Ω–∏–µ", {}).get("status", {}).get("name", "") or ""
        total = props.get("–í—Å–µ–≥–æ", {}).get("number", 0) or 0

        # üëá –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∑–∞–ø–∏—Å—å –≤ –ë–î
        cursor.execute("SELECT category, subcategory, model, serial_number, notes, status, total FROM inventory WHERE name = %s", (name,))
        existing = cursor.fetchone()

        if existing:
            # üëá –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø—É—Å—Ç—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è (—á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –≤—Ä—É—á–Ω—É—é)
            category = existing[0] if existing[0] else category
            subcategory = existing[1] if existing[1] else subcategory
            model = existing[2] if existing[2] else model
            serial_number = existing[3] if existing[3] else serial_number
            notes = existing[4] if existing[4] else notes
            status = existing[5] if existing[5] else status
            total = existing[6] if existing[6] else total

        # üëá –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ, –Ω–µ –∑–∞—Ç—Ä–∞–≥–∏–≤–∞—è —Å—Ç–æ–ª–±–µ—Ü rented
        cursor.execute(
            """
            INSERT INTO inventory (name, category, subcategory, model, serial_number, notes, status, total, last_updated)
            VALUES (%s, %s, %s, %s, %s, %s, %s, %s, NOW())
            ON CONFLICT (name) DO UPDATE 
            SET category = EXCLUDED.category,
                subcategory = EXCLUDED.subcategory,
                model = EXCLUDED.model,
                serial_number = EXCLUDED.serial_number,
                notes = EXCLUDED.notes,
                status = EXCLUDED.status,
                total = EXCLUDED.total,
                last_updated = NOW()
            """,
            (name, category, subcategory, model, serial_number, notes, status, total)
        )

    conn.commit()
    cursor.close()
    conn.close()
    print("‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –≤ PostgreSQL")

# üîπ 5. –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞
def main():
    update_table_structure()  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—Å–µ –ª–∏ —Å—Ç–æ–ª–±—Ü—ã –µ—Å—Ç—å
    notion_data = fetch_notion_data()
    if notion_data:
        insert_data_into_postgres(notion_data)

if __name__ == "__main__":
    main()