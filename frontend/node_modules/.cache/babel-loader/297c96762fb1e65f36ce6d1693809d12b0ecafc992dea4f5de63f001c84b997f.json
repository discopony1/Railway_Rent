{"ast":null,"code":"var _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport EquipmentList from \"./EquipmentList\";\nimport StatusSelect from \"./StatusSelect\";\nimport './RentalRow.css';\nconst RentalRow = ({\n  booking,\n  onUpdate,\n  onDelete\n}) => {\n  _s();\n  const [rental, setRental] = useState(booking);\n  const [showEquipmentList, setShowEquipmentList] = useState(false);\n  const [conflicts, setConflicts] = useState([]);\n  useEffect(() => {\n    setRental(booking);\n  }, [booking]);\n  useEffect(() => {\n    checkConflicts();\n  }, [rental.start_date, rental.end_date, rental.status]);\n  const checkConflicts = () => {\n    const newConflicts = [];\n    const now = new Date(new Date().toLocaleString('en-US', {\n      timeZone: 'Asia/Almaty'\n    }));\n    if (!rental.start_date || !rental.end_date) {\n      newConflicts.push({\n        message: \"❌ Укажите дату и время\",\n        severity: \"error\"\n      });\n      setConflicts(newConflicts);\n      return;\n    }\n    try {\n      const startDateTime = new Date(rental.start_date);\n      const endDateTime = new Date(rental.end_date);\n      if (isNaN(startDateTime.getTime()) || isNaN(endDateTime.getTime())) {\n        newConflicts.push({\n          message: \"❌ Некорректный формат даты/времени\",\n          severity: \"error\"\n        });\n      }\n      if (startDateTime <= now && rental.status === \"Бронь\") {\n        newConflicts.push({\n          message: \"⚠️ Дата начала наступила, но статус не 'Выдано'\",\n          severity: \"warning\"\n        });\n      }\n      if (endDateTime <= now && rental.status !== \"Возвращено\") {\n        newConflicts.push({\n          message: \"⚠️ Дата окончания прошла, но статус не 'Возвращено'\",\n          severity: \"warning\"\n        });\n      }\n      if (startDateTime >= endDateTime) {\n        newConflicts.push({\n          message: \"⚠️ Дата/время начала позже конца!\",\n          severity: \"error\"\n        });\n      }\n\n      // Проверка кратности времени 15 минутам\n      const startMinutes = startDateTime.getMinutes();\n      const endMinutes = endDateTime.getMinutes();\n      if (startMinutes % 15 !== 0 || endMinutes % 15 !== 0) {\n        newConflicts.push({\n          message: \"ℹ️ Время должно быть кратно 15 минутам\",\n          severity: \"info\"\n        });\n      }\n      setConflicts(newConflicts);\n    } catch (error) {\n      setConflicts([{\n        message: \"❌ Ошибка проверки дат\",\n        severity: \"error\"\n      }]);\n    }\n  };\n  const handleChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    if (name === 'start_date' || name === 'end_date') {\n      const date = new Date(value);\n      if (!isNaN(date.getTime())) {\n        // Округляем минуты до ближайших 15\n        const minutes = date.getMinutes();\n        const roundedMinutes = Math.round(minutes / 15) * 15;\n        date.setMinutes(roundedMinutes);\n        const updatedRental = {\n          ...rental,\n          [name]: date.toISOString().slice(0, 16)\n        };\n        setRental(updatedRental);\n        if (onUpdate) {\n          onUpdate(rental.id, updatedRental);\n        }\n        return;\n      }\n    }\n    const updatedRental = {\n      ...rental,\n      [name]: value\n    };\n    setRental(updatedRental);\n    if (onUpdate) {\n      onUpdate(rental.id, updatedRental);\n    }\n  };\n  const formatDateTimeForInput = dateString => {\n    if (!dateString) return \"\";\n    const date = new Date(dateString);\n    return !isNaN(date.getTime()) ? date.toISOString().slice(0, 16) : \"\";\n  };\n\n  // ... остальной JSX код остается без изменений ...\n};\n_s(RentalRow, \"ENxPbdcwaoO6XVzAWNbLfvholtw=\");\n_c = RentalRow;\nexport default RentalRow;\nvar _c;\n$RefreshReg$(_c, \"RentalRow\");","map":{"version":3,"names":["React","useState","useEffect","EquipmentList","StatusSelect","RentalRow","booking","onUpdate","onDelete","_s","rental","setRental","showEquipmentList","setShowEquipmentList","conflicts","setConflicts","checkConflicts","start_date","end_date","status","newConflicts","now","Date","toLocaleString","timeZone","push","message","severity","startDateTime","endDateTime","isNaN","getTime","startMinutes","getMinutes","endMinutes","error","handleChange","e","name","value","target","date","minutes","roundedMinutes","Math","round","setMinutes","updatedRental","toISOString","slice","id","formatDateTimeForInput","dateString","_c","$RefreshReg$"],"sources":["C:/Users/discopony/Desktop/MSchool/Notion automation/Railway_Rent/frontend/src/components/RentalRow.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport EquipmentList from \"./EquipmentList\";\r\nimport StatusSelect from \"./StatusSelect\";\r\nimport './RentalRow.css';\r\n\r\nconst RentalRow = ({ booking, onUpdate, onDelete }) => {\r\n    const [rental, setRental] = useState(booking);\r\n    const [showEquipmentList, setShowEquipmentList] = useState(false);\r\n    const [conflicts, setConflicts] = useState([]);\r\n\r\n    useEffect(() => {\r\n        setRental(booking);\r\n    }, [booking]);\r\n\r\n    useEffect(() => {\r\n        checkConflicts();\r\n    }, [rental.start_date, rental.end_date, rental.status]);\r\n\r\n    const checkConflicts = () => {\r\n        const newConflicts = [];\r\n        const now = new Date(new Date().toLocaleString('en-US', { timeZone: 'Asia/Almaty' }));\r\n\r\n        if (!rental.start_date || !rental.end_date) {\r\n            newConflicts.push({ message: \"❌ Укажите дату и время\", severity: \"error\" });\r\n            setConflicts(newConflicts);\r\n            return;\r\n        }\r\n\r\n        try {\r\n            const startDateTime = new Date(rental.start_date);\r\n            const endDateTime = new Date(rental.end_date);\r\n\r\n            if (isNaN(startDateTime.getTime()) || isNaN(endDateTime.getTime())) {\r\n                newConflicts.push({ message: \"❌ Некорректный формат даты/времени\", severity: \"error\" });\r\n            }\r\n\r\n            if (startDateTime <= now && rental.status === \"Бронь\") {\r\n                newConflicts.push({ \r\n                    message: \"⚠️ Дата начала наступила, но статус не 'Выдано'\", \r\n                    severity: \"warning\" \r\n                });\r\n            }\r\n\r\n            if (endDateTime <= now && rental.status !== \"Возвращено\") {\r\n                newConflicts.push({ \r\n                    message: \"⚠️ Дата окончания прошла, но статус не 'Возвращено'\", \r\n                    severity: \"warning\" \r\n                });\r\n            }\r\n\r\n            if (startDateTime >= endDateTime) {\r\n                newConflicts.push({ message: \"⚠️ Дата/время начала позже конца!\", severity: \"error\" });\r\n            }\r\n\r\n            // Проверка кратности времени 15 минутам\r\n            const startMinutes = startDateTime.getMinutes();\r\n            const endMinutes = endDateTime.getMinutes();\r\n            if (startMinutes % 15 !== 0 || endMinutes % 15 !== 0) {\r\n                newConflicts.push({ \r\n                    message: \"ℹ️ Время должно быть кратно 15 минутам\", \r\n                    severity: \"info\" \r\n                });\r\n            }\r\n\r\n            setConflicts(newConflicts);\r\n        } catch (error) {\r\n            setConflicts([{ message: \"❌ Ошибка проверки дат\", severity: \"error\" }]);\r\n        }\r\n    };\r\n\r\n    const handleChange = (e) => {\r\n        const { name, value } = e.target;\r\n        \r\n        if (name === 'start_date' || name === 'end_date') {\r\n            const date = new Date(value);\r\n            if (!isNaN(date.getTime())) {\r\n                // Округляем минуты до ближайших 15\r\n                const minutes = date.getMinutes();\r\n                const roundedMinutes = Math.round(minutes / 15) * 15;\r\n                date.setMinutes(roundedMinutes);\r\n                \r\n                const updatedRental = { ...rental, [name]: date.toISOString().slice(0, 16) };\r\n                setRental(updatedRental);\r\n                if (onUpdate) {\r\n                    onUpdate(rental.id, updatedRental);\r\n                }\r\n                return;\r\n            }\r\n        }\r\n\r\n        const updatedRental = { ...rental, [name]: value };\r\n        setRental(updatedRental);\r\n        if (onUpdate) {\r\n            onUpdate(rental.id, updatedRental);\r\n        }\r\n    };\r\n\r\n    const formatDateTimeForInput = (dateString) => {\r\n        if (!dateString) return \"\";\r\n        const date = new Date(dateString);\r\n        return !isNaN(date.getTime()) ? date.toISOString().slice(0, 16) : \"\";\r\n    };\r\n\r\n    // ... остальной JSX код остается без изменений ...\r\n};\r\n\r\nexport default RentalRow;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}