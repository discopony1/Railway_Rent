{"ast":null,"code":"const handleChange = e => {\n  const {\n    name,\n    value\n  } = e.target;\n  if (name === 'start_date' || name === 'end_date') {\n    const date = new Date(value);\n    if (!isNaN(date.getTime())) {\n      // Корректируем часовой пояс\n      const userTimezoneOffset = date.getTimezoneOffset() * 60000;\n      const adjustedDate = new Date(date.getTime() - userTimezoneOffset);\n\n      // Округляем минуты до ближайших 15\n      const minutes = adjustedDate.getMinutes();\n      const roundedMinutes = Math.round(minutes / 15) * 15;\n      adjustedDate.setMinutes(roundedMinutes);\n\n      // Форматируем дату в строку ISO с учетом локального времени\n      const roundedValue = adjustedDate.toISOString().slice(0, 16);\n      const updatedRental = {\n        ...rental,\n        [name]: roundedValue\n      };\n      setRental(updatedRental);\n      if (onUpdate) {\n        onUpdate(rental.id, updatedRental);\n      }\n      return;\n    }\n  }\n  const updatedRental = {\n    ...rental,\n    [name]: value\n  };\n  setRental(updatedRental);\n  if (onUpdate) {\n    onUpdate(rental.id, updatedRental);\n  }\n};","map":{"version":3,"names":["handleChange","e","name","value","target","date","Date","isNaN","getTime","userTimezoneOffset","getTimezoneOffset","adjustedDate","minutes","getMinutes","roundedMinutes","Math","round","setMinutes","roundedValue","toISOString","slice","updatedRental","rental","setRental","onUpdate","id"],"sources":["C:/Users/discopony/Desktop/MSchool/Notion automation/Railway_Rent/frontend/src/components/RentalRow.js"],"sourcesContent":["const handleChange = (e) => {\r\n    const { name, value } = e.target;\r\n    \r\n    if (name === 'start_date' || name === 'end_date') {\r\n        const date = new Date(value);\r\n        if (!isNaN(date.getTime())) {\r\n            // Корректируем часовой пояс\r\n            const userTimezoneOffset = date.getTimezoneOffset() * 60000;\r\n            const adjustedDate = new Date(date.getTime() - userTimezoneOffset);\r\n            \r\n            // Округляем минуты до ближайших 15\r\n            const minutes = adjustedDate.getMinutes();\r\n            const roundedMinutes = Math.round(minutes / 15) * 15;\r\n            adjustedDate.setMinutes(roundedMinutes);\r\n            \r\n            // Форматируем дату в строку ISO с учетом локального времени\r\n            const roundedValue = adjustedDate.toISOString().slice(0, 16);\r\n            \r\n            const updatedRental = { ...rental, [name]: roundedValue };\r\n            setRental(updatedRental);\r\n            if (onUpdate) {\r\n                onUpdate(rental.id, updatedRental);\r\n            }\r\n            return;\r\n        }\r\n    }\r\n\r\n    const updatedRental = { ...rental, [name]: value };\r\n    setRental(updatedRental);\r\n    if (onUpdate) {\r\n        onUpdate(rental.id, updatedRental);\r\n    }\r\n};"],"mappings":"AAAA,MAAMA,YAAY,GAAIC,CAAC,IAAK;EACxB,MAAM;IAAEC,IAAI;IAAEC;EAAM,CAAC,GAAGF,CAAC,CAACG,MAAM;EAEhC,IAAIF,IAAI,KAAK,YAAY,IAAIA,IAAI,KAAK,UAAU,EAAE;IAC9C,MAAMG,IAAI,GAAG,IAAIC,IAAI,CAACH,KAAK,CAAC;IAC5B,IAAI,CAACI,KAAK,CAACF,IAAI,CAACG,OAAO,CAAC,CAAC,CAAC,EAAE;MACxB;MACA,MAAMC,kBAAkB,GAAGJ,IAAI,CAACK,iBAAiB,CAAC,CAAC,GAAG,KAAK;MAC3D,MAAMC,YAAY,GAAG,IAAIL,IAAI,CAACD,IAAI,CAACG,OAAO,CAAC,CAAC,GAAGC,kBAAkB,CAAC;;MAElE;MACA,MAAMG,OAAO,GAAGD,YAAY,CAACE,UAAU,CAAC,CAAC;MACzC,MAAMC,cAAc,GAAGC,IAAI,CAACC,KAAK,CAACJ,OAAO,GAAG,EAAE,CAAC,GAAG,EAAE;MACpDD,YAAY,CAACM,UAAU,CAACH,cAAc,CAAC;;MAEvC;MACA,MAAMI,YAAY,GAAGP,YAAY,CAACQ,WAAW,CAAC,CAAC,CAACC,KAAK,CAAC,CAAC,EAAE,EAAE,CAAC;MAE5D,MAAMC,aAAa,GAAG;QAAE,GAAGC,MAAM;QAAE,CAACpB,IAAI,GAAGgB;MAAa,CAAC;MACzDK,SAAS,CAACF,aAAa,CAAC;MACxB,IAAIG,QAAQ,EAAE;QACVA,QAAQ,CAACF,MAAM,CAACG,EAAE,EAAEJ,aAAa,CAAC;MACtC;MACA;IACJ;EACJ;EAEA,MAAMA,aAAa,GAAG;IAAE,GAAGC,MAAM;IAAE,CAACpB,IAAI,GAAGC;EAAM,CAAC;EAClDoB,SAAS,CAACF,aAAa,CAAC;EACxB,IAAIG,QAAQ,EAAE;IACVA,QAAQ,CAACF,MAAM,CAACG,EAAE,EAAEJ,aAAa,CAAC;EACtC;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}