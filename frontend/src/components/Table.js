import React, { useState, useEffect, useReducer } from "react";
import RentalRow from "./RentalRow";
import API_BASE_URL from "../config";
import logo from '../logo.jpg'
import './Table.css';

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—à–∏–±–æ–∫
const ErrorNotification = ({ message, onClose }) => (
    <div className="error-notification">
        <span>{message}</span>
        <button onClick={onClose}>–ó–∞–∫—Ä—ã—Ç—å</button>
    </div>
);

// –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è–º–∏
const bookingsReducer = (state, action) => {
    switch (action.type) {
        case 'SET_BOOKINGS':
            return action.payload;
        case 'ADD_BOOKING':
            return [action.payload, ...state];
        case 'DELETE_BOOKING':
            return state.filter((booking) => booking.id !== action.payload);
        default:
            return state;
    }
};

const Table = () => {
    const [bookings, setBookings] = useState([]);
    const [error, setError] = useState(null);

    useEffect(() => {
        fetchBookings();
    }, []);

    const formatDateForAPI = (dateString) => {
        if (!dateString) return null;
        const date = new Date(dateString);
        return date.toISOString().split("T")[0]; // –§–æ—Ä–º–∞—Ç YYYY-MM-DD
    };

    // –ó–∞–≥—Ä—É–∑–∫–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π
    const fetchBookings = async () => {
        try {
            const response = await fetch(`${API_BASE_URL}/bookings`);
            const data = await response.json();
            setError(null);
            setBookings(sortBookings(data || []));
        } catch (err) {
            console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π:", err);
            setError(err.message);
        }
    };

    // –§—É–Ω–∫—Ü–∏—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
    const sortBookings = (bookingsList) => {
        return [...bookingsList].sort((a, b) => {
            if (!a.start_date && !b.start_date) return 0;
            if (!a.start_date) return -1;
            if (!b.start_date) return 1;
            return new Date(b.start_date) - new Date(a.start_date);
        });
    };

    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∞—Ä–µ–Ω–¥—ã
    const addRental = async () => {
        try {
            const response = await fetch(`${API_BASE_URL}/bookings`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({})
            });

            if (!response.ok) {
                const errorText = await response.text();
                throw new Error(`–û—à–∏–±–∫–∞ ${response.status}: ${errorText}`);
            }

            const savedRental = await response.json();
            setBookings(prevBookings => sortBookings([savedRental, ...prevBookings])); // ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º –≤–≤–µ—Ä—Ö + —Å–æ—Ä—Ç–∏—Ä—É–µ–º
        } catch (error) {
            console.error("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞—Ä–µ–Ω–¥—ã:", error);
            setError(error.message || "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ");
        }
    };

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞—Ä–µ–Ω–¥—ã
    const updateRental = async (id, updatedData) => {
        const formattedData = {
            ...updatedData,
            start_date: updatedData.start_date ? formatDateForAPI(updatedData.start_date) : undefined, 
            end_date: updatedData.end_date ? formatDateForAPI(updatedData.end_date) : undefined, 
            equipment: updatedData.equipment.map(({ name, quantity }) => ({ name, quantity })) 
        };
    
        console.log("üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ API:", formattedData); // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
    
        try {
            const response = await fetch(`${API_BASE_URL}/bookings/${id}`, {
                method: "PUT",
                headers: {
                    "Content-Type": "application/json"
                },
                body: JSON.stringify(formattedData)
            });
    
            if (!response.ok) {
                throw new Error(`–û—à–∏–±–∫–∞ ${response.status}`);
            }
    
            console.log("‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!");
        } catch (error) {
            console.error("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:", error);
        }
    };
    

    // –£–¥–∞–ª–µ–Ω–∏–µ –∞—Ä–µ–Ω–¥—ã
    const handleDelete = async (id) => {
        try {
            const response = await fetch(`${API_BASE_URL}/bookings/${id}`, { method: 'DELETE' });

            if (!response.ok) {
                throw new Error(`–û—à–∏–±–∫–∞ ${response.status}`);
            }

            setBookings(prevBookings => sortBookings(prevBookings.filter(booking => booking.id !== id)));
        } catch (error) {
            console.error("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è:", error);
            setError(error.message || "–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ");
        }
    };

    return (
        <div>
            <div className="table-header-container">
                {/* –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–æ —Ä—è–¥–æ–º —Å –∑–∞–≥–æ–ª–æ–≤–∫–æ–º */}
                <button onClick={addRental} className="add-button">‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞—Ä–µ–Ω–¥—É</button>
                <h2>üìã –¢–∞–±–ª–∏—Ü–∞ –∞—Ä–µ–Ω–¥—ã</h2>
                <img src={logo} alt="Logo" className="logo" /> 
               
                
            </div>
            
            {error && <p className="error-message">{error}</p>}
            <table className="rental-table">
                <thead>
                    <tr>
                        <th>–î–∞—Ç–∞ –∞—Ä–µ–Ω–¥—ã</th>
                        <th>–ò–º—è</th>
                        <th>–ö—Ç–æ –≤—ã–¥–∞–ª</th>
                        <th>–ö—Ç–æ –ø—Ä–∏–Ω—è–ª</th>
                        <th>–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ</th>
                        <th>–ü—Ä–∏–º–µ—á–∞–Ω–∏—è</th>
                        <th>–°—Ç–∞—Ç—É—Å</th>
                        <th>–ö–æ–Ω—Ñ–ª–∏–∫—Ç—ã</th>
                        <th>–î–µ–π—Å—Ç–≤–∏—è</th>
                    </tr>
                </thead>
                <tbody>
                    {bookings.map((booking) => (
                        <RentalRow 
                            key={booking.id || `new-${Math.random()}`}
                            booking={booking}
                            onUpdate={updateRental}
                            onDelete={() => handleDelete(booking.id)}
                        />
                    ))}
                </tbody>
            </table>
        </div>
    );
};

export default Table;