import React, { useState, useEffect } from "react";
import RentalRow from "./RentalRow";
import LoadingSpinner from "./LoadingSpinner";
import API_BASE_URL from "../config";
import logo from '../logo.png'
import './Table.css';

const Table = () => {
    const [bookings, setBookings] = useState([]);
    const [error, setError] = useState(null);
    const [isEditingRow, setIsEditingRow] = useState(null); // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç—Ä–æ–∫–∏

    useEffect(() => {
        fetchBookings();
    }, []);

    const formatDateForAPI = (dateString) => {
        if (!dateString) return null;
        const date = new Date(dateString);
        return date.toISOString().split("T")[0]; // –§–æ—Ä–º–∞—Ç YYYY-MM-DD
    };

    // –ó–∞–≥—Ä—É–∑–∫–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π
    const fetchBookings = async () => {
        try {
            const response = await fetch(`${API_BASE_URL}/bookings`);
            const data = await response.json();
            setError(null);
            setBookings(sortBookings(data || []));
        } catch (err) {
            console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π:", err);
            setError(err.message);
        }
    };

    // –§—É–Ω–∫—Ü–∏—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
    const sortBookings = (bookingsList) => {
        // –§–∏–ª—å—Ç—Ä—É–µ–º null —ç–ª–µ–º–µ–Ω—Ç—ã –ø–µ—Ä–µ–¥ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–æ–π
        const validBookings = bookingsList.filter(booking => booking !== null && booking !== undefined);
        
        return [...validBookings].sort((a, b) => {
            if (!a.start_date && !b.start_date) return 0;
            if (!a.start_date) return -1;
            if (!b.start_date) return 1;
            return new Date(b.start_date) - new Date(a.start_date);
        });
    };

    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∞—Ä–µ–Ω–¥—ã
    const addRental = async () => {
        try {
            const response = await fetch(`${API_BASE_URL}/bookings`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    renter: "",
                    issuer: "",
                    receiver: "",
                    status: "–ë—Ä–æ–Ω—å",
                    notes: "",
                    equipment: [],
                    where: "–≤ —Å—Ç—É–¥–∏–∏"
                })
            });

            if (!response.ok) {
                const errorText = await response.text();
                throw new Error(`–û—à–∏–±–∫–∞ ${response.status}: ${errorText}`);
            }

            const savedRental = await response.json();
            console.log("üì• –°–æ–∑–¥–∞–Ω–Ω–∞—è –∞—Ä–µ–Ω–¥–∞:", savedRental);
            
            if (savedRental && typeof savedRental === 'object') {
                setBookings(prevBookings => sortBookings([savedRental, ...prevBookings])); // ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º –≤–≤–µ—Ä—Ö + —Å–æ—Ä—Ç–∏—Ä—É–µ–º
            } else {
                console.error("‚ùå API –≤–µ—Ä–Ω—É–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:", savedRental);
                setError("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ - –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞");
            }
        } catch (error) {
            console.error("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞—Ä–µ–Ω–¥—ã:", error);
            setError(error.message || "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ");
        }
    };

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞—Ä–µ–Ω–¥—ã
    const updateRental = async (id, updatedData) => {
        const formattedData = {
            ...updatedData,
            start_date: updatedData.start_date ? formatDateForAPI(updatedData.start_date) : undefined, 
            end_date: updatedData.end_date ? formatDateForAPI(updatedData.end_date) : undefined, 
            equipment: updatedData.equipment.map(({ name, quantity }) => ({ name, quantity })), 
            where: updatedData.where || "–≤ —Å—Ç—É–¥–∏–∏" // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        };

        console.log("üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ API:", formattedData); // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π

        try {
            const response = await fetch(`${API_BASE_URL}/bookings/${id}`, {
                method: "PUT",
                headers: {
                    "Content-Type": "application/json"
                },
                body: JSON.stringify(formattedData)
            });

            if (!response.ok) {
                throw new Error(`–û—à–∏–±–∫–∞ ${response.status}`);
            }

            console.log("‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!");
        } catch (error) {
            console.error("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:", error);
        }
    };

    // –£–¥–∞–ª–µ–Ω–∏–µ –∞—Ä–µ–Ω–¥—ã
    const handleDelete = async (id) => {
        try {
            const response = await fetch(`${API_BASE_URL}/bookings/${id}`, { method: 'DELETE' });

            if (!response.ok) {
                throw new Error(`–û—à–∏–±–∫–∞ ${response.status}`);
            }

            setBookings(prevBookings => sortBookings(prevBookings.filter(booking => booking.id !== id)));
        } catch (error) {
            console.error("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è:", error);
            setError(error.message || "–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ");
        }
    };

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    const handleClickEdit = (id) => {
        if (isEditingRow === id) {
            setIsEditingRow(null); // –ï—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º–∞—è —Å—Ç—Ä–æ–∫–∞ —Ç–∞ –∂–µ, —á—Ç–æ —É–∂–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç—Å—è, –æ—Ç–º–µ–Ω—è–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        } else {
            setIsEditingRow(id); // –í–∫–ª—é—á–∞–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
        }
    };

    return (
        <div className="page-container">
            <div className="rental-table-header-container">
                <div className="rental-table-header">
                    <button onClick={addRental} className="add-button">‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞—Ä–µ–Ω–¥—É</button>
                    <h2>üìã –¢–∞–±–ª–∏—Ü–∞ –∞—Ä–µ–Ω–¥—ã</h2>
                    <img src={logo} alt="Logo" className="logo" /> 
                </div>
            </div>
            
            <div className="rental-table-container">
                <div className="rental-table-scroll-container">
                    {error && <p className="error-message">{error}</p>}
                    <table className="rental-table">
                        <thead>
                            <tr>
                                <th>–î–∞—Ç–∞ –∞—Ä–µ–Ω–¥—ã</th>
                                <th>–ò–º—è</th>
                                <th>–ö—Ç–æ –≤—ã–¥–∞–ª</th>
                                <th>–ö—Ç–æ –ø—Ä–∏–Ω—è–ª</th>
                                <th>–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ</th>
                                <th>–ü—Ä–∏–º–µ—á–∞–Ω–∏—è</th>
                                <th>–ì–¥–µ</th> 
                                <th>–°—Ç–∞—Ç—É—Å</th>
                                <th></th>
                                <th></th>
                            </tr>
                        </thead>
                        <tbody>
                            {bookings.map((booking) => (
                                <RentalRow 
                                    key={booking.id || `new-${Math.random()}`}
                                    booking={booking}
                                    onUpdate={updateRental}
                                    onDelete={() => handleDelete(booking.id)}
                                    isEditingRow={isEditingRow}
                                    setIsEditingRow={setIsEditingRow}
                                    onClickEdit={() => handleClickEdit(booking.id)}
                                />
                            ))}
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    );
};

export default Table;
